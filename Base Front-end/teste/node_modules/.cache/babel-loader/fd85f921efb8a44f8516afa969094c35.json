{"ast":null,"code":"//\n//  react-dropdown-input\n//  Displays a ReactBootstrap.Input element\n//  with a ReactBootstrap.DropdownMenu of possible options.\n//\n\"use strict\";\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar React = require(\"react/addons\");\n\nvar ReactBootstrap = require(\"react-bootstrap\");\n\nvar joinClasses = require(\"react/lib/joinClasses\");\n\nvar cx = require(\"classnames\");\n\nvar BootstrapMixin = ReactBootstrap.BootstrapMixin;\nvar DropdownStateMixin = ReactBootstrap.DropdownStateMixin;\nvar DropdownMenu = ReactBootstrap.DropdownMenu;\nvar Input = ReactBootstrap.Input;\nvar MenuItem = ReactBootstrap.MenuItem;\nvar defaultMaxText = \"+# more not shown\";\n\nvar defaultFilter = function defaultFilter(filterText, optionName) {\n  // also optionIndex as third arg\n  return optionName.toLowerCase().indexOf(filterText.toLowerCase()) >= 0;\n};\n\nvar genLength = function genLength(list) {\n  // deal with both regular arrays and immutablejs objects, which have .count() instead of length\n  return typeof list.count !== \"undefined\" ? list.count() : list.length;\n};\n\nvar genGet = function genGet(list, i) {\n  // deal with both regular arrays and immutablejs objects, which have list.get(i) instead of list[i]\n  return typeof list.get !== \"undefined\" ? list.get(i) : list[i];\n};\n\nvar caseInsensIndexOf = function caseInsensIndexOf(list, str) {\n  var lowerList = list.map(function (item) {\n    return item.toLowerCase();\n  });\n  return lowerList.indexOf(str.toLowerCase());\n};\n\nvar DropdownInput = React.createClass({\n  displayName: \"DropdownInput\",\n  mixins: [BootstrapMixin, DropdownStateMixin],\n  propTypes: {\n    pullRight: React.PropTypes.bool,\n    dropup: React.PropTypes.bool,\n    defaultValue: React.PropTypes.string,\n    menuClassName: React.PropTypes.string,\n    max: React.PropTypes.number,\n    maxText: React.PropTypes.string,\n    onChange: React.PropTypes.func,\n    onSelect: React.PropTypes.func,\n    navItem: React.PropTypes.bool,\n    options: React.PropTypes.oneOfType([React.PropTypes.object, React.PropTypes.array]).isRequired,\n    filter: React.PropTypes.func,\n    // the rest are to make eslint happy\n    id: React.PropTypes.string,\n    className: React.PropTypes.string,\n    bsSize: React.PropTypes.string\n  },\n  getInitialState: function getInitialState() {\n    return {\n      value: this.props.defaultValue || \"\",\n      activeIndex: -1\n    };\n  },\n  filteredOptions: function filteredOptions() {\n    var filter = this.props.filter || defaultFilter;\n    return this.props.options.filter(filter.bind(undefined, this.state.value));\n  },\n  cappedLength: function cappedLength(options) {\n    var total = genLength(options);\n\n    if (total > this.props.max) {\n      // if it exceeded the max, we took an extra one off\n      total = this.props.max - 1;\n    }\n\n    return total;\n  },\n  render: function render() {\n    var classes = {\n      dropdown: true,\n      open: this.state.open,\n      dropup: this.props.dropup\n    }; // you can provide a filter prop, which is a function(filterText, optionName, optionIndex) which should\n    // return true to show option with the given name and index, given the input filterText.\n\n    var filteredOptions = this.filteredOptions();\n    var numFiltered = genLength(filteredOptions);\n    var maxMenuItem = null;\n    var maxText = typeof this.props.maxText === \"undefined\" ? defaultMaxText : this.props.maxText;\n\n    if (this.props.max && numFiltered > this.props.max) {\n      // take an extra one off, to leave space for the maxText\n      filteredOptions = filteredOptions.slice(0, this.props.max - 1);\n      maxText = maxText.replace(\"#\", numFiltered - this.props.max + 1);\n      maxMenuItem = this.renderAsMenuItem(maxText, this.props.max, null, true);\n    }\n\n    var dropdown = null;\n\n    if (numFiltered > 0) {\n      dropdown = React.createElement(DropdownMenu, {\n        className: this.props.menuClassName,\n        ref: \"menu\",\n        \"aria-labelledby\": this.props.id,\n        pullRight: this.props.pullRight,\n        key: 1,\n        onSelect: null\n      }, filteredOptions.map(this.renderAsMenuItem), maxMenuItem);\n    }\n\n    return React.createElement(\"div\", {\n      className: joinClasses(this.props.className, cx(classes))\n    }, React.createElement(Input, _extends({}, this.props, {\n      menuClassName: null,\n      options: null,\n      type: \"text\",\n      bsSize: this.props.bsSize,\n      ref: \"dropdownInput\",\n      onClick: this.handleDropdownClick,\n      key: 0,\n      navDropdown: this.props.navItem,\n      navItem: null,\n      pullRight: null,\n      onSelect: null,\n      onChange: this.handleInputChange,\n      onKeyDown: this.handleKeyDown,\n      dropup: null,\n      value: this.state.value\n    })), dropdown);\n  },\n  renderAsMenuItem: function renderAsMenuItem(item, index, options, disabled) {\n    var start = item.toLowerCase().indexOf(this.state.value.toLowerCase()),\n        end = start + this.state.value.length,\n        part1 = item.slice(0, start),\n        part2 = item.slice(start, end),\n        part3 = item.slice(end);\n    var classes = cx({\n      active: this.state.activeIndex === index,\n      disabled: disabled === true\n    });\n\n    if (disabled) {\n      // don't highlight parts of disabled items, eg. the maxText\n      part1 = item;\n      part2 = null;\n      part3 = null;\n    }\n\n    return React.createElement(MenuItem, {\n      key: index,\n      onSelect: this.handleOptionSelect.bind(this, index, item),\n      className: classes,\n      onMouseEnter: this.handleMouseEnter.bind(this, index)\n    }, part1, React.createElement(\"b\", null, part2), part3);\n  },\n  handleInputChange: function handleInputChange(e) {\n    // the user changed the input text\n    this.setState({\n      value: e.target.value,\n      activeIndex: -1\n    });\n    this.setDropdownState(true); // fire the supplied onChange event.\n\n    this.sendChange({\n      value: e.target.value\n    });\n  },\n  handleKeyDown: function handleKeyDown(e) {\n    // catch arrow keys and the Enter key\n    var filteredOptions = this.filteredOptions();\n    var numOptions = this.cappedLength(filteredOptions);\n    var newName;\n\n    switch (e.keyCode) {\n      case 38:\n        // up arrow\n        if (this.state.activeIndex > 0) {\n          this.setState({\n            activeIndex: this.state.activeIndex - 1\n          });\n        } else {\n          this.setState({\n            activeIndex: numOptions - 1\n          });\n        }\n\n        break;\n\n      case 40:\n        // down arrow\n        this.setState({\n          activeIndex: (this.state.activeIndex + 1) % numOptions\n        });\n        break;\n\n      case 13:\n        // enter\n        var newIndex = caseInsensIndexOf(this.props.options, this.state.value); // may need this\n\n        if (this.state.open) {\n          e.preventDefault();\n        }\n\n        if (this.state.activeIndex >= 0 && this.state.activeIndex < numOptions) {\n          newIndex = this.state.activeIndex;\n          newName = genGet(filteredOptions, this.state.activeIndex);\n          this.setDropdownState(false);\n        } else if (this.state.activeIndex === -1 && newIndex >= 0) {\n          newName = genGet(this.props.options, newIndex);\n          this.setDropdownState(false);\n        } else {\n          newIndex = this.state.activeIndex;\n          newName = this.state.value;\n        }\n\n        this.sendSelect({\n          value: newName,\n          index: newIndex\n        });\n        this.sendChange({\n          value: newName\n        });\n        this.setState({\n          value: newName,\n          activeIndex: -1\n        });\n        break;\n    }\n  },\n  handleMouseEnter: function handleMouseEnter(index) {\n    // when the mouse enters a dropdown menu item, set the active item to the item\n    this.setState({\n      activeIndex: index\n    });\n  },\n  handleDropdownClick: function handleDropdownClick(e) {\n    e.preventDefault();\n    this.setDropdownState(!this.state.open);\n  },\n  handleOptionSelect: function handleOptionSelect(key, name) {\n    // the user clicked on a dropdown menu item\n    this.setDropdownState(false);\n    this.sendSelect({\n      value: name,\n      index: this.state.activeIndex\n    });\n    this.sendChange({\n      value: name\n    });\n    this.setState({\n      value: name,\n      activeIndex: -1\n    });\n  },\n  sendChange: function sendChange(e) {\n    if (this.props.onChange) {\n      this.props.onChange(e);\n    }\n  },\n  sendSelect: function sendSelect(e) {\n    if (this.props.onSelect) {\n      this.props.onSelect(e);\n    }\n  }\n});\nmodule.exports = DropdownInput;","map":null,"metadata":{},"sourceType":"script"}